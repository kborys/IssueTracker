@using IssueTracker.Web.Helpers
@model IssueTracker.Web.Models.Project.ProjectIssuesViewModel

<div class="h-full flex flex-col">
  <header>
    <nav id="main-breadcrumb">
      <ol class="inline-flex items-center space-x-2">
        <li class="inline-flex items-center">
          <a asp-action="List" class="items-center text-sm text-slate-700 hover:text-blue-600">
            Projekty
          </a>
        </li>

        <li>
          <div class="flex items-center">
            <svg class="w-3 h-3 text-gray-400 mx-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <a asp-action="Issues" asp-route-id="@Model.ProjectId" class="ms-1 text-sm text-slate-700 hover:text-blue-600 md:ms-2">
              @Model.ProjectName
            </a>
          </div>
        </li>
      </ol>
    </nav>


    <h1 class="my-2 text-2xl font-medium">Zgłoszenia</h1>
  </header>

  <article id="issues" class="grid grid-cols-12 flex-grow">
    <section id="issues-list" class="col-span-2 bg-slate-100 border rounded-md">
      <header class="p-2">Tutaj będzie filtrowanie</header>

      <ul class="flex flex-col space-y-0.5">
        @foreach (var issue in Model.Issues)
        {
          <li id="@issue.Id" class="p-2 border rounded-md border-slate-300 bg-white cursor-pointer hover:border-slate-700">
            <h1 class="ml-0.5 mb-2">@issue.Name</h1>
            <div class="flex justify-between">
              <span>@Html.IssueTypeIcon(issue.Type, 22)</span>
              <span class="w-7 h-7">
                @Html.UserAvatar(issue.AssignedToInitials, issue.AssignedToAvatarUrl, 28);
              </span>
            </div>
          </li>
        }
      </ul>
    </section>
  </article>
</div>


@section Scripts {
  <script type="text/javascript">
    const issuesSection = document.getElementById('issues');
    const issuesList = document.querySelectorAll('#issues-list li');
    let selectedIssue = issuesList[0];
    select(selectedIssue);
    
    document.querySelectorAll('#issues-list li').forEach(issue => {
      issue.addEventListener('click', () => {
        unselect(selectedIssue);
        selectedIssue = issue;
        select(selectedIssue);
      })
    });
 
    function select(element){
      fetchDetails(element.id);
      element?.classList.remove('bg-white');
      element?.classList.remove('border-slate-300');
      element?.classList.add('bg-blue-50');
      element?.classList.add('border-blue-300');
    }
  
    function unselect(element){
      element?.classList.remove('bg-blue-50');
      element?.classList.remove('border-blue-300');
      element?.classList.add('bg-white');
      element?.classList.add('border-slate-300');
    }

    function fetchDetails(issueId) {
      fetch('/Issues/' + issueId)
        .then(response => response.text())
        .then(rawHtml => {
          const issues = document.getElementById('issues');
          const issue = document.getElementById('issue');
          const issueDetails = document.getElementById('issue-details');
          
          if (issue && issueDetails) {
            issues.removeChild(issue);
            issues.removeChild(issueDetails);
          }
          
          issues.insertAdjacentHTML('beforeend', rawHtml);
        });
    }
  
  </script>
}